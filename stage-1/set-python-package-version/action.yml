name: Set Python package version
description: Set and validate package version in __init__.py, and check it doesn't already exist on PyPI.org
inputs:
  version:
    description: PEP 440 compliant version number of the release. If this is not set, will use the env var VERSION instead.
    required: false
  init-file:
    description: Path to __init__.py
    required: true
  pypi-package-name:
    description: Name of package on PyPI.org
    required: true
  stage-changes:
    description: Whether to stage the changes to __init__.py
    required: false
    default: true
outputs:
  package-version:
    description: Version number as outputted by setup.py (might be different from __init__.py, e.g. if epoch prefixed)
    value: ${{ steps.get-package-version.outputs.version }}
runs:
  using: composite
  steps:
    - name: Install utils
      shell: bash
      run: |
        python3 -m pip install -q packaging
        echo "${{ github.action_path }}/../../bin" >> $GITHUB_PATH  # Note: this persists in the workflow after the action is called

    - name: Update version in __init__.py
      shell: bash
      env:
        INIT_FILE: ${{ inputs.init-file }}
        INPUT_VERSION: ${{ inputs.version }}
      run: |
        if [[ "$INPUT_VERSION" ]]; then
          VERSION=$INPUT_VERSION
        fi
        if [[ -z "$VERSION" ]]; then
          echo "::error:: No version number supplied"
          exit 1
        fi

        pattern="(__version__ ?= ?['\"]).*(['\"])"
        sed -i -E "s/${pattern}/\1${VERSION}\2/" "$INIT_FILE"

        if [[ -z $(git diff --stat -- "$INIT_FILE") ]]; then
          echo "::error:: No changes to ${INIT_FILE} occurred"
          exit 1
        fi

        if ${{ inputs.stage-changes }}; then
          git add "$INIT_FILE"
        fi

    - name: Get package version
      # Might differ slightly from __init__.py, e.g. if epoch prefixed
      id: get-package-version
      shell: bash
      run: |
        if [[ -f setup.py ]]; then
          # get version from the setup.py for pre PEP517 projects
          echo "setup.py detected"
          package_version=$( python setup.py --version )
        else
          # shim to get the project version from a PEP517 project
          echo "PEP 517 project detected"
          echo 'from setuptools import setup; setup()' > setup.py
          package_version=$( python setup.py --version )
          rm setup.py
        fi
        # Check version number is valid:
        cmp_py_versions "$package_version" "$package_version"
        echo "package version: ${package_version}"
        echo "::set-output name=version::$package_version"

    - name: Check version doesn't already exist on PyPI.org
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        PYPI_PACKAGE_NAME: ${{ inputs.pypi-package-name }}
        SETUP_PY_VERSION: ${{ steps.get-package-version.outputs.version }}
      run: node check-pypi.js
